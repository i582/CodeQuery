// Code generated by goyacc -o pkg/querylang/internal/query/query.go ./pkg/querylang/internal/query/query-p.y. DO NOT EDIT.

//line ./pkg/querylang/internal/query/query-p.y:2
package query

import __yyfmt__ "fmt"

//line ./pkg/querylang/internal/query/query-p.y:2

import (
	"github.com/i582/CodeQuery/pkg/querylang/ast"
	"github.com/i582/CodeQuery/pkg/querylang/token"
)

//line ./pkg/querylang/internal/query/query-p.y:11
type yySymType struct {
	yys   int
	node  ast.Node
	token *token.Token
	list  []ast.Node
}

const T_SELECT = 57346
const T_FROM = 57347
const T_WHERE = 57348
const T_WITH = 57349
const T_COUNT = 57350
const T_LIMIT = 57351
const T_OFFSET = 57352
const T_ORDER_BY = 57353
const T_DESC = 57354
const T_ASC = 57355
const T_LNUMBER = 57356
const T_DNUMBER = 57357
const T_CONSTANT_STRING = 57358
const T_STRING = 57359
const T_VARIABLE = 57360
const T_COMMENT = 57361
const T_DOC_COMMENT = 57362
const T_WHITESPACE = 57363
const T_OR = 57364
const T_XOR = 57365
const T_AND = 57366
const T_NOT = 57367
const T_EQUAL = 57368
const T_NOT_EQUAL = 57369
const T_SMALLER = 57370
const T_GREATER = 57371
const T_SMALLER_OR_EQUAL = 57372
const T_GREATER_OR_EQUAL = 57373
const T_OBJECT_OPERATOR = 57374

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_SELECT",
	"T_FROM",
	"T_WHERE",
	"T_WITH",
	"T_COUNT",
	"T_LIMIT",
	"T_OFFSET",
	"T_ORDER_BY",
	"T_DESC",
	"T_ASC",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_CONSTANT_STRING",
	"T_STRING",
	"T_VARIABLE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_WHITESPACE",
	"T_OR",
	"T_XOR",
	"T_AND",
	"T_NOT",
	"T_EQUAL",
	"T_NOT_EQUAL",
	"T_SMALLER",
	"T_GREATER",
	"T_SMALLER_OR_EQUAL",
	"T_GREATER_OR_EQUAL",
	"T_OBJECT_OPERATOR",
	"'\"'",
	"'{'",
	"'}'",
	"';'",
	"':'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'?'",
	"'&'",
	"'-'",
	"'+'",
	"'!'",
	"'~'",
	"'@'",
	"'$'",
	"','",
	"'|'",
	"'='",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'.'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line ./pkg/querylang/internal/query/query-p.y:259

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 3,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 77,
	39, 37,
	50, 37,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 94

var yyAct = [...]int{
	54, 26, 5, 74, 53, 33, 9, 82, 68, 16,
	37, 81, 38, 48, 69, 13, 21, 17, 38, 6,
	36, 37, 57, 38, 46, 47, 13, 64, 66, 28,
	29, 30, 13, 11, 50, 15, 35, 19, 55, 56,
	24, 58, 59, 60, 61, 62, 63, 4, 1, 6,
	32, 67, 10, 23, 40, 41, 43, 42, 44, 45,
	39, 31, 80, 79, 52, 51, 34, 70, 12, 73,
	76, 77, 37, 71, 38, 72, 22, 25, 12, 27,
	75, 18, 20, 76, 77, 78, 83, 65, 49, 14,
	8, 7, 3, 2,
}

var yyPact = [...]int{
	45, -1000, -1000, -1000, -1000, -1000, -2, 30, -41, -21,
	-1000, -1000, -1000, -1000, 31, 15, 9, -49, 29, 15,
	-1000, -1, 28, 15, 15, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -26, 25, 15, -1, 15, 15, 5,
	15, 15, 15, 15, 15, 15, -12, -1000, -1000, 17,
	15, -1000, -42, -1000, -1, -6, -1000, -24, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15, -1, 15, 15,
	50, -1000, -28, -43, -1000, -1000, -1, -1000, -1000, -1000,
	-1000, -1000, 15, -1000,
}

var yyPgo = [...]int{
	0, 93, 92, 61, 1, 91, 90, 33, 89, 88,
	87, 85, 82, 81, 0, 80, 79, 77, 76, 3,
	75, 69, 66, 4, 65, 64, 48,
}

var yyR1 = [...]int{
	0, 26, 1, 1, 2, 2, 4, 5, 5, 5,
	10, 10, 11, 11, 11, 9, 9, 8, 12, 13,
	13, 22, 22, 24, 24, 23, 25, 25, 16, 19,
	20, 20, 21, 21, 18, 18, 15, 15, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 17, 17, 17, 3, 7, 6, 6,
}

var yyR2 = [...]int{
	0, 1, 1, 0, 1, 1, 7, 1, 4, 1,
	3, 0, 1, 1, 0, 2, 0, 2, 1, 2,
	0, 2, 0, 0, 1, 1, 3, 1, 1, 1,
	0, 1, 3, 1, 6, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1,
}

var yyChk = [...]int{
	-1000, -26, -1, -2, 2, -4, 4, -5, -6, 8,
	54, -7, -3, 17, -8, 5, 50, 38, -13, 6,
	-12, -14, -18, 38, 25, -17, -4, -16, 14, 15,
	16, -3, -7, 54, -22, 7, -14, 22, 24, 32,
	26, 27, 29, 28, 30, 31, -14, -14, 39, -9,
	9, -24, -25, -23, -14, -14, -14, 17, -14, -14,
	-14, -14, -14, -14, 39, -10, 11, -14, 50, 38,
	-14, -23, -20, -21, -19, -15, -14, -4, -11, 13,
	12, 39, 50, -19,
}

var yyDef = [...]int{
	-2, -2, 1, 2, 4, 5, 0, 0, 7, 0,
	9, 57, 55, 54, 20, 0, 0, 0, 22, 0,
	17, 18, 38, 0, 0, 49, 50, 35, 51, 52,
	53, 28, 56, 0, 16, 23, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 8, 11,
	0, 21, 24, 27, 25, 46, 47, 0, 39, 40,
	41, 42, 43, 44, 45, 6, 0, 15, 0, 30,
	14, 26, 0, 31, 33, 29, 36, -2, 10, 12,
	13, 34, 0, 32,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 46, 33, 3, 49, 56, 43, 3,
	38, 39, 54, 45, 50, 44, 59, 55, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 36,
	57, 52, 58, 42, 48, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 40, 3, 41, 53, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 34, 51, 35, 47,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:114
		{
			yylex.(*Parser).rootNode = yylex.(*Parser).builder.NewRoot(yyDollar[1].list)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:118
		{
			yyVAL.list = []ast.Node{yyDollar[1].node}
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:119
		{
			yyVAL.list = []ast.Node{}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:123
		{
			yyVAL.node = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:124
		{
			yyVAL.node = yyDollar[1].node
		}
	case 6:
		yyDollar = yyS[yypt-7 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:129
		{
			yyVAL.node = yylex.(*Parser).builder.NewSelectExpr(yyDollar[1].token, yyDollar[2].node, yyDollar[3].node, yyDollar[4].node, yyDollar[5].node, yyDollar[6].node, yyDollar[7].node)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:133
		{
			yyVAL.node = yylex.(*Parser).builder.NewSelectSubjectExpr(yyDollar[1].node, nil, nil)
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:134
		{
			yyVAL.node = yylex.(*Parser).builder.NewSelectSubjectExpr(nil, yyDollar[1].token, yyDollar[3].token)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:135
		{
			yyVAL.node = yylex.(*Parser).builder.NewSelectSubjectExpr(nil, nil, yyDollar[1].token)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:139
		{
			yyVAL.node = yylex.(*Parser).builder.NewOrderByExpr(yyDollar[1].token, yyDollar[2].node, yyDollar[3].token)
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:140
		{
			yyVAL.node = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:144
		{
			yyVAL.token = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:145
		{
			yyVAL.token = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:146
		{
			yyVAL.token = nil
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:150
		{
			yyVAL.node = yylex.(*Parser).builder.NewLimitExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:151
		{
			yyVAL.node = nil
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:155
		{
			yyVAL.node = yylex.(*Parser).builder.NewFromExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:159
		{
			yyVAL.node = yyDollar[1].node
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:163
		{
			yyVAL.node = yylex.(*Parser).builder.NewWhereExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:164
		{
			yyVAL.node = nil
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:168
		{
			yyVAL.node = yylex.(*Parser).builder.NewWithExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:169
		{
			yyVAL.node = nil
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:173
		{
			yyVAL.node = nil
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:174
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:178
		{
			yyVAL.node = yyDollar[1].node
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:183
		{
			yyVAL.node = yylex.(*Parser).builder.AppendToSeparatedList(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:185
		{
			yyVAL.node = yylex.(*Parser).builder.NewSeparatedList(yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:189
		{
			yyVAL.node = yylex.(*Parser).builder.NewVariable(yyDollar[1].token)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:193
		{
			yyVAL.node = yyDollar[1].node
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:197
		{
			yyVAL.node = nil
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:198
		{
			yyVAL.node = yyDollar[1].node
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:203
		{
			yyVAL.node = yylex.(*Parser).builder.AppendToSeparatedList(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:205
		{
			yyVAL.node = yylex.(*Parser).builder.NewSeparatedList(yyDollar[1].node)
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:210
		{
			yyVAL.node = yylex.(*Parser).builder.NewMethodCallExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].token, yyDollar[4].token, yyDollar[5].node, yyDollar[6].token)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:212
		{
			yyVAL.node = yyDollar[1].node
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:216
		{
			yyVAL.node = yyDollar[1].node
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:217
		{
			yyVAL.node = yyDollar[1].node
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:221
		{
			yyVAL.node = yyDollar[1].node
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:222
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:223
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:224
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:225
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:226
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:227
		{
			yyVAL.node = yylex.(*Parser).builder.NewComparisonExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:229
		{
			yyVAL.node = yyDollar[2].node
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:230
		{
			yyVAL.node = yylex.(*Parser).builder.NewBinaryExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:231
		{
			yyVAL.node = yylex.(*Parser).builder.NewBinaryExpr(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:232
		{
			yyVAL.node = yylex.(*Parser).builder.NewNotExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:233
		{
			yyVAL.node = yyDollar[1].node
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:235
		{
			yyVAL.node = yyDollar[1].node
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:239
		{
			yyVAL.node = yylex.(*Parser).builder.NewBasicLit(yyDollar[1].token)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:240
		{
			yyVAL.node = yylex.(*Parser).builder.NewBasicLit(yyDollar[1].token)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:241
		{
			yyVAL.node = yylex.(*Parser).builder.NewBasicLit(yyDollar[1].token)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:245
		{
			yyVAL.token = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:249
		{
			yyVAL.node = yylex.(*Parser).builder.NewIdentifier(yyDollar[1].token)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:254
		{
			yyVAL.node = yylex.(*Parser).builder.AppendToSeparatedList(yyDollar[1].node, yyDollar[2].token, yyDollar[3].node)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./pkg/querylang/internal/query/query-p.y:256
		{
			yyVAL.node = yylex.(*Parser).builder.NewSeparatedList(yyDollar[1].node)
		}
	}
	goto yystack /* stack new state and value */
}
